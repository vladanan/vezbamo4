package views

import (
  "net/http"
  "strings"
	"github.com/gorilla/sessions"
	// "fmt"
)

// func showLanguage (store sessions.Store, r *http.Request, item string) bool {

// 	session, err := store.Get(r, "vezbamo.onrender.com-users")
// 	if err != nil {
// 		// http.Error(w, err.Error(), http.StatusInternalServerError)
// 		// return
// 		fmt.Println("Error on get store:", err)
// 	}

// 	lang_map := session.Values["language"]
// 	sessionLanguage := ""
	
// 	if lang_map != nil {
// 		sessionLanguage = lang_map.(string)
// 	}	

// 	accept := r.Header.Get("Accept-Language")

// 	// fmt.Println("\nshadow:", sessionLanguage, item, strings.Split(accept, ",")[0])
	
// 	if sessionLanguage == "" && item == "browser" {
// 		return true
// 	} else
// 	if (
// 		(sessionLanguage == "en-US" || sessionLanguage == "") &&
// 		(sessionLanguage == "en-US" || (strings.Split(accept, ",")[0] == "en-US" || strings.Split(accept, ",")[0] == "en")) &&
// 		item == "en") {
// 		return true
// 	} else
// 	if (
// 		(sessionLanguage == "es" || sessionLanguage == "") &&
// 		(sessionLanguage == "es" || strings.Split(accept, ",")[0] == "es") &&
// 		item == "es") {
// 		return true
// 	} else
// 	if (
// 		(sessionLanguage == "sr" || sessionLanguage == "") &&
// 		(sessionLanguage == "sr" || strings.Split(accept, ",")[0] == "sr") &&
// 		item == "sr") {
// 		return true
// 	} else {
// 		return false
// 	}

// }

// var cssheader_lang_button string = `text-sm ml-1 px-1 text-red-500`

// templ header_lang_button(link string, class string, text string, store sessions.Store, r *http.Request) {
// 	<button
// 		hx-post={"/"+link}
// 		hx-on:click="delayReload()"
// 		class={class, templ.KV("text-blue-300", !showLanguage(store, r, link)), templ.KV("text-blue-100", showLanguage(store, r, link))}
// 	>
// 		{text}
// 	</button>
// }

func getLang(store sessions.Store, r *http.Request) []string {
	session, _ := store.Get(r, "vezbamo.onrender.com-users")
	lang_map := session.Values["language"]
	accept := r.Header.Get("Accept-Language")
	language := ""
	
	if lang_map != nil {
		language = lang_map.(string)
	}
	if language == "" {
		language = strings.Split(accept, ",")[0]
	}

	var languageNames = map[string]string {
		"ar": "Arabic    - العربية: ar",
		"zh": "Chinese - 中文 (汉语): zh",
		"en": "English  : en",
		"fr": "French   - français: fr",
		"de": "German - Deutch: de",
		"hi": "Hindi      - हिन्दी: hi",
		"it": "Italian    ;- italiano: it",
		"ru": "Russian  - русский: ru",
		"sr": "Serbian  - српски: sr",
		"sh": "Serbo-Croatian - srpskohrvatski: sh",
		"es": "Spanish  - español: es",
	}

	// fmt.Println("lang:", language, "accept:", accept, "0:", strings.Split(accept, ",")[0])

	return []string{language, languageNames[language]}
}

templ Header(store sessions.Store, r *http.Request) {
	
	<div class="relative top-0 left-2 w-6">
		<a href="/" class="">
			<img
				src="static/site/vezbamo_logo6.svg"
				height="25"
				width="25"
				alt="Vezbamo"
			/>
		</a>
	</div> 
	<a href="/" class="absolute text-blue-400 top-1 left-10 text-sm">{Translate(store, r, "Home")}</a>
	
	<div class="absolute top-0 right-2">

		// <select onchange="sendLang(event)" name="lang" id="lang" class="text-sm bg-sky-950 text-blue-300">
		// 	<option value={getLang(store, r)}>{getLang(store, r)}</option>
		// 	<option hx-post="/eng" hx-on:click="delayReload()" value="eng">eng</option>
		// 	<option hx-post="/srh" hx-on:click="delayReload()" value="srh">srh</option>
		// 	<option hx-post="/esp" hx-on:click="delayReload()" value="esp">esp</option>
		// 	<option hx-post="/browser" hx-on:click="delayReload()"value="browser">browser</option>
		// </select>

		<select onchange="sendLang(event)" name="lang" id="lang" class=" w-[72px] text-sm bg-sky-950 text-blue-400">
			<option class="text-blue-100 font-bold " value={getLang(store, r)[0]}>{getLang(store, r)[1]}</option>
			<option disabled value="ar">Arabic &nbsp;&nbsp;&nbsp;- العربية: ar</option>
			<option disabled value="zh">Chinese - 中文 (汉语): zh</option>
			<option value="en">English&nbsp;&nbsp;: en</option>
			<option disabled value="fr">French &nbsp;&nbsp;- français: fr</option>
			<option disabled value="de">German - Deutch: de</option>
			<option disabled value="hi">Hindi &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- हिन्दी: hi</option>
			<option disabled value="it">Italian &nbsp;&nbsp;&nbsp;- italiano: it</option>
			<option disabled value="ru">Russian &nbsp;- русский: ru</option>
			<option disabled value="sr">Serbian &nbsp;- српски: sr</option>
			<option value="sh">Serbo-Croatian - srpskohrvatski: sh</option>
			<option disabled value="es">Spanish &nbsp;- español: es</option>
			// <option value="browser">auto</option>
		</select>

		// @header_lang_button("eng", cssheader_lang_button, "eng", store, r)
		// @header_lang_button("srh", cssheader_lang_button, "srh", store, r)
		// @header_lang_button("esp", cssheader_lang_button, "esp", store, r)
		// @header_lang_button("browser", cssheader_lang_button, "auto", store, r)

		if session, err := store.Get(r, "vezbamo.onrender.com-users"); err == nil {
			if auth, _ := session.Values["authenticated"].(bool); !auth {
				// "text-sm ml-1 px-1 bg-gradient-to-l from-sky-200 to-blue-300 rounded-sm shadow-md shadow-slate-500"
				// "text-sm ml-1 px-1 bg-gradient-to-r from-sky-700 to-blue-400 rounded-sm"
				<button class="text-sm ml-1 px-1 text-blue-300" type="button">
					<a href="/login">{Translate(store, r, "Login")}</a>
				</button>
			} else {
				<button class="text-sm ml-1 px-1 bg-gradient-to-r from-blue-700 to-blue-400 rounded-sm" type="button">
					<a href="/logout">{Translate(store, r, "Logout")}</a>
				</button>
			}
		}

	</div>
	
}