// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.543
package assignments

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"github.com/gorilla/sessions"
	"github.com/vladanan/vezbamo4/src/views"
	"net/http"
)

func SecondaryGrade1(store sessions.Store, r *http.Request) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
			if !templ_7745c5c3_IsBuffer {
				templ_7745c5c3_Buffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"relative top-4 left-5\"><script src=\"https://unpkg.com/react@18/umd/react.development.js\"></script><script src=\"https://unpkg.com/react-dom@18/umd/react-dom.development.js\"></script><!-- Don't use this in production:\n\t\t\t\n\t\t\t<script src=\"static/babel.min.js\"></script>\n\t\t\t--><script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"></script><div id=\"root\" class=\"text-blue-300\"></div><script type=\"text/babel\">\n      \n\t\t\t\t// daje random int uključujući min i max vrednosti\n        function rndInt(min, max) {\n          return Math.floor(Math.random() * (max - min + 1) ) + min;\n        }\n\n        // daje novi niz sa nasumičnim elementima iz celog niza34523523\n        // menja niz koji je ubačen!!!\n        const array_rand2 = (niz) => {\n          let novi_niz = [0];\n          let i = 0;\n          let izabrani_clan;\n          while (niz.length > 0) {\n            izabrani_clan = rndInt(0, niz.length-1);\n            novi_niz[i] = niz[izabrani_clan];\n            niz.splice(izabrani_clan, 1);\n            i++;\n          }\n          return novi_niz;\n        }\n\n        // daje nov niz sa nasumičnim elementima iz niza tako da ih ima koliko broj_clanova\n        // PRAVI DUPLE I MORA DA SE SREDI PO UGLEDU NA splice MEHANIZAM ONOG GORE!!!!\n        function array_rand(niz, broj_clanova) {\n          //console.log('niz:' + niz, 'broj:' + broj_clanova);\n          //console.log(niz.length);\n          let novi_niz = [0];\n          for (let i = 0; i < broj_clanova; i++) {\n            let clan = rndInt(0, niz.length-1);\n            //console.log('clan: ' + clan);\n            //console.log(niz[clan]);\n            novi_niz[i] = niz[clan];\n            //console.log('novi niz for:'+novi_niz);  \n          }\n          //console.log('novi niz out:'+novi_niz);\n          return novi_niz;\n        }\n\n        //lažni shuffle samo za nizove sa 10 članova\n        function shuffle() {\n          let kombinacija = rndInt(0, 2);\n          let novi_niz = [0];\n          let kombinacije = [\n            [4, 8, 7, 0, 2, 5, 3, 1, 9, 6],\n            [6, 9, 1, 3, 5, 2, 0, 7, 8, 4],\n            [2, 9, 3, 8, 6, 5, 1, 0, 4, 7]\n          ];\n          let izabrana = kombinacije[kombinacija];\n          \n          //for (let i = 0; i < 10; i++) {\n            novi_niz = izabrana;\n          //}\n          return novi_niz;\n        }\n\n\n        \n        function S1m_kombi (props) {\n\n          //console.log('console kombi', props)\n\n          let s1m_kombi = <>{props.novo_pitanje.kombi}</>\n\n          return (\n            s1m_kombi\n          )\n        }\n\n\n\n        function Zadaci_s1 (props) {\n\n          //console.log('PROPOVI: ', props)\n\n          const [zadatak, setZadatak] = React.useState('s1m_kombi');\n\n          const [novo_pitanje, setNovo_pitanje] = React.useState({\n            a: 2,\n            op2: '+',\n            b: 2,\n            t11: 'Марко',\n            t22: 'Маша',\n            t33: 'камиончића',\n            kombi: 'Кликни на: Нови задатак!'\n          });\n\n\n          const promeniZadatak = (zadatak_pt) => {\n            setZadatak(zadatak_pt);\n\n            if (zadatak_pt == 'o1m_1_10') {\n              setNovo_pitanje({\n                a: 0,\n                op2: '+',\n                b: 0,\n                t11: 'Милош',\n                t22: 'Јелена',\n                t33: 'колача',\n                kombi: 'Кликни на: Нови задатак!'\n              });\n            } else {\n              setNovo_pitanje({\n                a: 0,\n                op2: '*',\n                b: 0,\n                t11: 'Милош',\n                t22: 'Јелена',\n                t33: 'колача',\n                kombi: 'Кликни на: Нови задатак!'\n              });\n            }\n\n            \n\n          }\n\n          const novoPitanje = () => {\n\n            //console.log(zadatak)\n\n            switch (zadatak) {\n\n              case 's1m_kombi':\n                let kombi = rndInt(1, 3);\n                //kombi = 2;\n                //console.log('kombi:'+kombi);\n\n                let c = '';\n                let ponavljanje;\n                let broj_elemenata;\n                let cifara;\n\n                //$svi = rand(0, 1) == 0 ? \"prvih \" . rand(cifara, 9) : \"svih\";\n                //$raspored = rand(0, 1) == 0 ? \"nije bitan\" : \"jeste bitan\";\n                //ponavljanje = rand(0, 1) == 0 ? \"ne ponavljaju\" : \"ponavljaju\";\n\n                //$rez;\n                let pzpn;\n                let html = '';\n\n                // echo \"svi: \" . $svi_elementi . \", raspored: \". bitan_raspored . \", ponavljanje: \" . ponavljanje . \"<br>\";\n                // print_r($e);\n\n                switch (kombi) {\n\n                  case 1: //permutacije\n                    broj_elemenata = rndInt(5, 9);\n                    cifara = broj_elemenata;\n\n                    if (rndInt(0, 1) == 0) { //random brojevi sa ponavljanjem\n                      let c1 = [ //cifre\n                        rndInt(0, 9),\n                        rndInt(0, 9),\n                        rndInt(0, 9),\n                        rndInt(0, 9),\n                        rndInt(0, 9),\n                        rndInt(0, 9),\n                        rndInt(0, 9),\n                        rndInt(0, 9),\n                        rndInt(0, 9),\n                        rndInt(0, 9)\n                      ];\n                      //console.log('c1:' + c1.length + ' ' + c1);\n                      c = array_rand(c1, broj_elemenata);\n                      let da_se_kopira = rndInt(0, c.length-1);\n                      for (let i = 0; i < rndInt(1, 2); i++) { c[i] = c[da_se_kopira]; }\n                      ponavljanje = \"ponavljaju\";\n                      //console.log('c1: '+ c1);\n                    } else { //random brojevi sa ponavljanjem\n                      // let c2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n                      // shuffle(c2);\n                      // js analogija za php shuffle ne radi pa mora lažni\n                      let c2 = shuffle();\n                      //console.log('c2: '+c2.length);\n                      c = array_rand(c2, broj_elemenata);\n                      ponavljanje = \"ne ponavljaju\";\n                      //console.log('c2: '+ c2);\n                    }\n\n                    //console.log('c: '+ c);\n\n                    let deljivih = \"\";\n                    pzpn = \"\";\n                    let tip = rndInt(1, 2);\n                    \n                    //tip = 1; //////\n\n                    switch (tip) {\n\n                      case 1: //  prvi, zadnji, parni, neparni, deljivi\n                        \n                        deljivih = rndInt(0, 1);\n                        if (deljivih == 0) { // prva/zadnja n parna/neparna\n                          deljivih = \"\";\n                          pzpn = rndInt(0, 1) == 0 ? \"ako su prva \" + rndInt(2, 4) : \"ako su zadnja \" + rndInt(2, 4);\n                          pzpn = rndInt(0, 1) == 0 ? pzpn + \" broja parna i \" : pzpn + \" broja neparna i \";\n                        }\n                        else { // n cifreni deljivi sa n \n                          deljivih = \"deljivih sa \" + rndInt(2, 5) + \" \";\n                        }\n\n                        //html = \"\";\n\n                        let td = [];\n\n                        //console.log('c: ' + c.length);\n                        for (let i = 0; i < c.length; i++) {\n                          td.push(<td key={i} className=\"border border-black p-2\">{c[i]}</td>)\n                        }\n\n                        html = <>\n                        <br/>\n                        Koliko {cifara} cifrenih brojeva {deljivih}\n                        <br/>\n                        može da se dobije od cifara\n                        <br/>\n                        <table><tbody><tr>{td}</tr></tbody></table>\n                        {pzpn}ako se cifre {ponavljanje}?\n                        <br/>\n                        <br/>\n                        <img src='/static/permutacije.gif' />\n                        </>\n                        \n                        /* + \"<br>\" +\n                        \"<audio controls autoplay>\" +\n                        \"<source src='../Kenndog - Beethoven (Lyrics) if you see the homies with the guap.mp3' type='audio/mpeg'>\" +\n                        \"</audio>\";*/\n                        \n                        break;\n\n                      case 2: // tekstualni\n                        let t1 = [\"Na polici \", \"U šupi\", \"U sobi\", \"U korpi\", \"U frižideru\"];\n                        let t2 = [\"knjige\", \"mačke\", \"sveće\", \"jabuke\", \"veštice\"];\n                        let t11 = t1[rndInt(0, 4)];\n                        let t22 = t2[rndInt(0, 4)];\n\n                        let t3 = [\"vatrene: \", \"žute: \", \"grozne: \", \"plave: \", \"glupe: \", \"crvene: \" , \"divne: \", \"zelene: \"];\n                        let t33 = \"\";\n                        let b1 = rndInt(0, 7);\n                        let b2 = rndInt(0, 7);\n                        if (b1 == b2) {\n                          if (b1 < 4) {\n                          b2 = b1 + 1;\n                          } else {\n                          b2 = b1 - 1;\n                          }\n                        }\n                        let t31 = t3[b1];\n                        let t32 = t3[b2];\n                        let b3 = rndInt(0, 7);\n                        if (b3 == b1 || b3 == b2) {\n                          for (let i = 0; i < 20; i = i + rndInt(1, 2)) {\n                          let treci = rndInt(0, 5);\n                          if (t3[treci] != t31 || t3[treci] != t32) {\n                            t33 = t3[treci];\n                          }\n                          }\n                        } else {\n                          t33 = t3[b3];\n                        }\n                        \n                        html = '';\n\n                        // html = <>\n                        // <br/>Koliko {cifara} cifrenih brojeva {deljivih} može da se dobije od cifara\n                        // <br/> <table><tbody><tr> {td} </tr></tbody></table>\n                        // {pzpn} ako se cifre {ponavljanje} ?\n                        // <br/><br/>\n                        // <img src='../permutacije.gif' />\n                        // </>\n\n                        html = <><br/>\n                        {t11} se nalaze {t22} sledećih boja:<br/>\n                        {t31} {rndInt(1, 5)},&nbsp;\n                        {t32} {rndInt(1, 5)}&nbsp;i&nbsp;\n                        {t33} {rndInt(1, 5)}.<br/>\n                        Na koliko načina se one mogu rasporediti tako da {t22} iste boje budu jedna do druge?\n                        <br/><br/>\n                        <img src='/static/patke.webp' /><br/>\n                        </>  /* +\n                        \"<audio controls autoplay>\" +\n                        \"<source src='../Rokeri s Moravu - Krkenzi kikiriki evri dej.mp3' type='audio/mpeg'>\" +\n                        \"</audio>\";*/\n                        break;\n\n                      default:\n                        break;\n                    }\n\n                    break;\n\n                  case 2:\n                    //echo \"varijacije\";\n                    broj_elemenata = rndInt(0, 9);\n                    cifara = rndInt(3, 9);\n\n                    if (rndInt(0, 1) == 0) { //rand brojevi sa ponavljanjem\n                    let c1 = [ //cifre\n                      rndInt(0, 9),\n                      rndInt(0, 9),\n                      rndInt(0, 9),\n                      rndInt(0, 9),\n                      rndInt(0, 9),\n                      rndInt(0, 9),\n                      rndInt(0, 9),\n                      rndInt(0, 9),\n                      rndInt(0, 9),\n                      rndInt(0, 9)\n                    ];\n                    c = array_rand(c1, c1.length);\n                    let da_se_kopira = rndInt(0, c.length-1); //radi dupliranja nekih random elemenata\n                    for (let i = 0; i < rndInt(1, 2); i++) { c[i] = c[da_se_kopira]; }\n                    ponavljanje = \"ponavljaju\";\n                    } else {\n                    // let c2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n                    // shuffle(c2);\n                    // js analogija za php shuffle ne radi pa mora lažni\n                    let c2 = shuffle();\n                    c = array_rand(c2, c2.length);\n                    ponavljanje = \"ne ponavljaju\";\n                    }\n\n                    let pn = \"\";\n                    pzpn = \"\";\n\n                    if (rndInt(1, 2) == 1) { //samo parni/neparni ili prvih/zadnjih parnih/neparnih\n                    pn = rndInt(0, 1) == 0 ? \" parnih\" : \" neparnih\";\n                    } else {\n                    pzpn = rndInt(0, 1) == 0 ? \"ako su prva \" + rndInt(2, 4) : \"ako su zadnja \" + rndInt(2, 4);\n                    pzpn = rndInt(0, 1) == 0 ? pzpn + \" broja parna i \" : pzpn + \" broja neparna i \";\n                    }\n\n                    let td2 = [];\n\n                    //console.log('c: ' + c.length);\n                    for (let i = 0; i < c.length; i++) {\n                      td2.push(<td key={i} className=\"border border-black p-2\">{c[i]}</td>)\n                    }\n                      \n                    html = \"\";\n                    html = <>\n                    <br/>\n                    Koliko {cifara} cifrenih {pn} brojeva može da se dobije od cifara<br/>\n                    <table><tbody><tr>{td2}</tr></tbody></table>\n                    {pzpn} ako se cifre {ponavljanje}?\n                    <br/><br/>\n                    <img src='/static/varijacije.gif' /><br/></> /* +\n                    \"<audio controls autoplay>\" +\n                    \"<source src='../Sammy K - Fatal Attraction (Lyrics) hell naw better believe i aint that one.mp3' type='audio/mpeg'>\" + \n                    \"</audio>\";*/\n                    \n                    break;\n\n                  case 3:\n                    html = \"\";\n                    html = <>\n                      <br/>\n                        Комбинације су у изради!\n                      <br/>\n                      <img src='/static/kombinacije.gif' />\n                    </>\n                    break;\n\n                  default:\n                    break;\n\n                }\n\n                //console.log('html: ', html)\n                setNovo_pitanje({\n                  a: 3,\n                  op2: '+',\n                  b: 3,\n                  t11: 'Милош',\n                  t22: 'Јелена',\n                  t33: 'колача',\n                  kombi: html\n                });\n                break;\n\n              default:\n                break;\n            }\n\n            // setVidljiv_odgovor(false);\n            //setOdgovor(null);\n            \n          }\n\n\n          return (\n            <>\n              <p className=\"text-2xl mt-5 ml-2\">Одабери задатке:</p>\n\n              <div className=\"mx-2 p-2 text-black max-w-sm border-2 border-sky-700 rounded-md bg-gradient-to-r from-blue-50 to-transparent\">\n\n                {/*\n                <label className={zadatak == 'o1m_1_10'\n                  ? \"relative p-1 border-2 border-black rounded-md bg-sky-400\"\n                  : \"relative p-1 border-2 border-black rounded-md bg-gray-400\"}\n                htmlFor=\"o1m_1_10\">Сабирање и одузимање од 1 до 10\n                </label>\n                <input\n                onClick={(e) => promeniZadatak('o1m_1_10')}\n                className=\"relative ml-2 mt-2\"\n                type=\"radio\" id=\"o1m_1_10\" name=\"radio_z\" value=\"o1m_1_10\"\n                defaultChecked\n                />\n                <br/>\n                \n                <label className={zadatak == 'o1m_1_10txt'\n                  ? \"relative p-1 border-2 border-black rounded-md bg-gradient-to-br from-red-500 via-yellow-100 to-green-300\"\n                  : \"relative p-1 border-2 border-black rounded-md bg-gray-400\"}\n                htmlFor=\"o1m_1_10txt\">Смешно саб. и одуз. од 1 до 10\n                </label>\n                <input\n                onClick={(e) => promeniZadatak('o1m_1_10txt')}\n                className=\"relative ml-2 mt-5\"\n                type=\"radio\" id=\"o1m_1_10txt\" name=\"radio_z\" value=\"o1m_1_10txt\"\n                />\n                <br/>\n                */}\n\n                <label className={zadatak == 's1m_kombi'\n                  ? \"relative p-1 border-2 border-black rounded-md bg-sky-400\"\n                  : \"relative p-1 border-2 border-black rounded-md bg-gray-400\"} htmlFor=\"s1m_kombi\">Комбинаторика за средњу школу\n                </label>\n                <input\n                onClick={(e) => promeniZadatak('s1m_kombi')}\n                className=\"relative ml-2 mt-5\"\n                type=\"radio\" id=\"s1m_kombi\" name=\"radio_z\" value=\"s1m_kombi\"\n                />\n                <br/>\n\n                {/*\n                <label className={zadatak == 'o2m_mnozenje'\n                  ? \"relative p-1 border-2 border-black rounded-md bg-sky-400\"\n                  : \"relative p-1 border-2 border-black rounded-md bg-gray-400\"} htmlFor=\"o2m_mnozenje\">Множење до 100\n                </label>\n                <input\n                onClick={(e) => promeniZadatak('o2m_mnozenje')}\n                className=\"relative ml-2 mt-5\"\n                type=\"radio\" id=\"o2m_mnozenje\" name=\"radio_z\" value=\"o2m_mnozenje\"\n                />\n                <br/>\n                */}\n\n                {zadatak == 's1m_kombi' && (\n                <>\n                  <br/>\n                  <button onClick={novoPitanje}\n                  className=\"ml-8 my-2 relative\n                  border-2 border-gray-500 rounded-md p-1 bg-blue-300 hover:bg-blue-400\">\n                    Нови задатак</button>\n                  <br/>\n\n                  <S1m_kombi\n                    novo_pitanje={novo_pitanje}\n                  />\n                </>\n                )}\n\n              </div>\n              <br/>\n            </>\n          )\n        }\n\n\n\n        const container = document.getElementById('root');\n        const root = ReactDOM.createRoot(container);\n        root.render(<Zadaci_s1 />);\n\n      </script></div><br><br><br><br><br><br>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if !templ_7745c5c3_IsBuffer {
				_, templ_7745c5c3_Err = io.Copy(templ_7745c5c3_W, templ_7745c5c3_Buffer)
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = views.Layout(store, r).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
